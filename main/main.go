package main

import (
    "fmt"
    "time"
    "runtime"
    "goBiCGSTAB/output"
    dp "goBiCGSTAB/denseMatrix"
    sp "goBiCGSTAB/sparseMatrix"
    vp "goBiCGSTAB/vector"
    "goBiCGSTAB/bicgstab"
)

func init() {
    runtime.GOMAXPROCS(runtime.NumCPU())
    appName := "goBiCGSTAB"
    buildDate := "2013-06-27"
    now := time.Now()

    fmt.Println(appName, "build:", buildDate)
    fmt.Printf("start time: %4d-%02d-%02d %02d:%02d:%02d\n", now.Year(),
        now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second())
}

func main() {

    msgChanSolver := output.New(output.Solver)

    AA := dp.New()
    AA.Set(`
          [ 3.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00, 0.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 2.00,-1.00 ]
          [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,-1.00, 3.00 ]
          `)

    bb := dp.New()
    bb.Set(`
          [ 210]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [  10]
          [1010]
          `)

    A := sp.New(AA.NoneZero)
    A.FillFromDenseMatrix(AA)

    b := vp.New(bb.RowN)
    b.FillFromDenseMatrix(bb)

    x0 := vp.New(b.N)


    switchChan := bicgstab.Run(A, x0, b,
        &bicgstab.Options{Tol: 10.0e-12, Name: "Ux", MsgChan: msgChanSolver})

    <-switchChan

    // for i := range x0.Val {
    //     fmt.Println(x0.Val[i])
    // }
    // fmt.Println(x0)

    x0.Clear()
    // x0.Val[0] = 5656

    switchChan <- true
    <-switchChan

    // for i := range x0.Val {
    //     fmt.Println(x0.Val[i])
    // }
    time.Sleep(10000000)

}
